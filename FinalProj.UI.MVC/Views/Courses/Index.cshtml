@model IEnumerable<FinalProj.DATA.Course>
@using FinalProj.DATA
@using Microsoft.AspNet.Identity

@{
    ViewBag.Title = "Courses";
}

@if (TempData["CourseConfirmation"] != null)
{
<p id="courseComp" class="alert alert-success text-center" style="display: none;">
    @TempData["CourseConfirmation"] 
</p>
}
@if (TempData["Confirmation"] != null)
{
<p id="lessonComp" class="alert alert-success text-center" style="display: none;">
    @TempData["Confirmation"]
</p>
}

<h2>@ViewBag.Title</h2>



@if (!User.IsInRole("Admin"))
{
    @Html.Partial("EmployeeCourses");
}
else
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CourseName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.CourseDescription)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.IsActive)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.CourseDescription)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.IsActive)
                </td>
                <td>
                    @Html.ActionLink("Edit", "Edit", new { id = item.CourseId }) |
                    @Html.ActionLink("Details", "Details", new { id = item.CourseId }) |
                    @Html.ActionLink("Delete", "Delete", new { id = item.CourseId })
                </td>
            </tr>
        }

    </table>

}

<section>
    @{ 
        List<UserDetail> managers  = new LMSEntities().UserDetails.Where(l => l.AspNetUser.AspNetUserRoles.AspNetRoles.Name = "Manager" }

    <canvas id="pieCanvas"></canvas>


</section>





@section Scripts
{
    <script>
        if ($('#courseComp')) {
            $('#courseComp').fadeIn('slow', function () {
                $('#courseComp').delay(5000).fadeOut();
            });
            };

        if ($('#lessonComp')) {
            $('#lessonComp').fadeIn('slow', function () {
                $('#lessonComp').delay(5000).fadeOut();
            });
        };

        var canvas = $('#pieCanvas');
        canvas.width = 300;
        canvas.height = 300;
        var ctx = canvas.getContext("2d");

        function drawLine(ctx, startX, startY, endX, endY) {
            ctx.beginPath();
            ctx.moveTo(startX, startY);
            ctx.lineTo(endX, endY);
            ctx.stroke();
        }

        function drawSlice(ctx, centerX, centerY, radius, startAngle, endAngle, color) {
            ctx.fillStyle = color;
            ctx.beginPath();
            ctx.moveTo(centerX, centerY);
            ctx.arc(centerX, centerY, radius, startAngle, endAngle);
            ctx.closePath();
            ctx.fill();
        }




    </script>



}